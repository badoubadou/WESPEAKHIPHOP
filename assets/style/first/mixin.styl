vert_align_middle()
	position absolute
	top 50%
	transform translateY(-50%)

align_middle()
	position absolute
	left 50%
	transform translateX(-50%)

center()
	position absolute
	top 50%
	left 50%
	transform translate(-50%,-50%)
				
pseudo_full(color, op = 1, height = 100%, width = 100%)
	content ''
	position absolute
	top 0
	left 0
	width width
	height height
	background color
	opacity op

on-circle($item-count, $circle-size, $item-size)
	center()
	position relative
	width $circle-size
	height $circle-size
	padding 0
	border-radius 50%
	list-style none
	margin 0
	> *
		display block
		position absolute
		top 50%
		left 50%
		width $item-size
		height 10px
		margin-left -($item-size / 2)
		$angle = (360 / $item-count)
		$rot = -90
		
		for $i in (1)..($item-count)
			&:nth-of-type({$i})
				transform rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg)
				text-align center
			$rot = $rot + $angle
			
triangle(width = 4px, height = 4px, direction = 'right', color = #fff)
	// Base triangle styles
	width 0
	height 0
	background 0
	border-style solid

	// Styles for each direction
	directions = {
		top: {
			border-width: 0 (width * .5) height (width * .5),
			border-color: transparent transparent color transparent
		},
		topRight: {
			border-width: 0 width height 0,
			border-color: transparent color transparent transparent
		},
		right: {
			border-width: (height * .5) 0 (height *.5) width,
			border-color: transparent transparent transparent color
		},
		bottomRight: {
			border-width: 0 0 height width,
			border-color: transparent transparent color transparent
		},
		bottom: {
			border-width: height (width * .5) 0 (width * .5),
			border-color: color transparent transparent transparent
		},
		bottomLeft: {
			border-width: width 0 0 height,
			border-color: transparent transparent transparent color
		},
		left: {
			border-width: (height * .5) width (height * .5) 0,
			border-color: transparent color transparent transparent
		},
		topLeft: {
			border-width: height width 0 0,
			border-color: color transparent transparent transparent
		}
	}

	// Mixin styles for passed direction
	styles = directions[direction]
	{styles}
